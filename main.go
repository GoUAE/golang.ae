package main

import (
	"context"
	"flag"
	"log"
	"net/http"
	"os"
	"path/filepath"

	"github.com/a-h/templ"
	"github.com/gouae/golang.ae/internal/template"
)

var (
	safeURL templ.SafeURL         = templ.SafeURL("/")
	navbar  []template.NavbarItem = []template.NavbarItem{
		{Name: "Organizers", Link: safeURL},
		{Name: "Meetups", Link: safeURL},
		{Name: "Projects", Link: safeURL},
		{Name: "Gallery", Link: safeURL},
		{Name: "Contact", Link: safeURL},
	}
	socials []template.Social = []template.Social{
		{Icon: "fa-twitter", Link: templ.SafeURL("/twitter")},
		{Icon: "fa-whatsapp", Link: templ.SafeURL("/whatsapp")},
		{Icon: "fa-linkedin", Link: templ.SafeURL("/linkedin")},
		{Icon: "fa-discord", Link: templ.SafeURL("/discord")},
		{Icon: "fa-github", Link: templ.SafeURL("/github")},
	}
)

func server(port string) {
	mux := http.NewServeMux()

	mux.HandleFunc("GET /", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path != "/" {
			http.NotFound(w, r)
			return
		}

		template.Home("golang.ae", navbar, socials).Render(context.Background(), w)
	})

	mux.HandleFunc("GET /public/", func(w http.ResponseWriter, r *http.Request) {
		filePath := r.URL.Path[len("/public/"):]
		fullPath := filepath.Join(".", "public", filePath)
		http.ServeFile(w, r, fullPath)
	})

	log.Printf("Server is running on http://localhost:%s\n", port)
	log.Fatal(http.ListenAndServe(":"+port, mux))
}

func static() {
	f, err := os.Create("index.html")
	if err != nil {
		log.Fatalf("failed to create output file: %v", err)
	}

	f.WriteString("<!-- AUTO GENERATED BY GOUAE -->\n")

	err = template.Home("golang.ae", navbar, socials).Render(context.Background(), f)
	if err != nil {
		log.Fatalf("failed to write output file: %v", err)
	}
}

func main() {
	portFlag := flag.String("port", "8080", "The port to listen on")
	staticFlag := flag.Bool("static", false, "The mode to run in")

	flag.Parse()

	if *staticFlag {
		static()
	} else {
		server(*portFlag)
	}
}
